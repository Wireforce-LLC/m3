"use client";
import Button from "@/app/components/Button";
import DependencyInspector from "@/app/components/DependencyInspector";
import LoadingBar, { LoadingBarRef } from "react-top-loading-bar";
import Navbar from "@/app/components/Navbar";
import TreeItem from "@/app/components/TreeItem";
import _ from "lodash";
import axios from "axios";
import md5 from "md5";
import moment, { Moment } from "moment";
import prettyMilliseconds from "pretty-ms";
import useOnce from "@/app/hooks/useOnce";
import { Editor, Monaco } from "@monaco-editor/react";
import { Metadata } from "next";
import { useEffect, useRef, useState } from "react";
import { useQuery } from "react-query";
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { TreeEntity } from "@/core/Tree";
import { VME } from "@/core/VM";

const fetchUsers = async () => {
  const res = await fetch("/api/tree");
  return res.json();
};

export const metadata: Metadata = {
  title: "M3 - JS Object Orchestrator",
  description: "Generated by create next app",
};

interface IdeState {
  cwd: string;
  source: string;
  objectHash: string;
  setHash: (hash: string) => void;
  setSource: (source: string) => void;
  setCwd: (cwd: string) => void;
}

interface TreeState {
  files: TreeEntity[];
  setFiles: (files: TreeEntity[]) => void;
}

interface CallResultState {
  result: VME<any> | undefined;
  isCalling: boolean;
  callingAt: Moment;
  call: () => void;
  cancel: () => void;
  setCallResult: (result: VME<any> | undefined) => void;
}

const useCallResultState = create<CallResultState>()(
  persist(
    (set) => ({
      result: undefined,
      setCallResult: (result) => set({ result }),
      callingAt: moment(),
      isCalling: false,
      call: () => set({ isCalling: true, callingAt: moment() }),
      cancel: () => set({ isCalling: false }),
    }),
    {
      name: "call-result-storage",
    }
  )
);

const useTreeState = create<TreeState>()(
  persist(
    (set) => ({
      files: [],
      setFiles: (files) => set({ files }),
    }),
    {
      name: "tree-storage",
    }
  )
);

const useIdeState = create<IdeState>()(
  persist(
    (set) => ({
      cwd: "",
      source: "",
      objectHash: "",
      setHash: (hash) => set({ objectHash: hash }),
      setSource: (source) => set({ source }),
      setCwd: (cwd) => set({ cwd }),
      //   increase: (by) => set((state) => ({ bears: state.bears + by })),
    }),
    {
      name: "bear-storage",
    }
  )
);

export default function index() {
  const response = useQuery("files", fetchUsers);
  const treeState = useTreeState();
  const state = useIdeState();
  const callResultState = useCallResultState();
  const [thisMoment, setThisMoment] = useState(moment());

  const ref = useRef<LoadingBarRef>(null);

  const runObject = async (objectHash: string) => {
    const res = await fetch(
      "api/vm/" + objectHash + "?unix=" + thisMoment.unix(),
      {
        method: "GET",
      }
    );
    return res.json();
  };

  const writeFile = async (source: string, objectHash: string) => {
    const res = await fetch("/api/tree/write", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        content: source,
        objectHash: objectHash,
      }),
    });
    return res.json();
  };

  const handleKeyDown = async (event: KeyboardEvent) => {
    if ((event.ctrlKey || event.metaKey) && event.key === "s") {
      event.preventDefault(); // Prevent the default browser behavior (saving the webpage)
      // Call your custom function here

      ref?.current?.continuousStart();
      await writeFile(state.source, state.objectHash);
      ref?.current?.complete();
    }

    if ((event.ctrlKey || event.metaKey) && event.key === "o") {
      event.preventDefault(); // Prevent the default browser behavior (saving the webpage)
      // Call your custom function here

      callResultState.setCallResult(undefined);
      callResultState.call();

      const response = await runObject(state.objectHash);

      callResultState.setCallResult(response.data);
      callResultState.cancel();
    }
  };

  useEffect(() => {
    const timeout = setInterval(() => {
      setThisMoment(moment());
    }, 100);

    return () => {
      clearInterval(timeout);
    };
  }, []);

  useEffect(() => {
    if (response.data) {
      treeState.setFiles(response.data.data.entries);
    }
  }, [response.data]);

  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [state.objectHash, state.source, state.cwd]);

  const applyMonacoMount = useOnce(async (editor: any, monaco: Monaco) => {
    console.log(editor, monaco);
    async function loadTypes(url: string, name: string) {
      console.log("Inject types from " + url);

      const axiosTypes = await axios.get(url);

      monaco.languages.typescript.javascriptDefaults.addExtraLib(
        axiosTypes.data,
        "ts:filename/" + name + ".d.ts"
      );

      monaco.editor.createModel(
        axiosTypes.data,
        "typescript",
        monaco.Uri.parse("ts:filename/" + name + ".d.ts")
      );
    }
    monaco.languages.typescript.javascriptDefaults.setCompilerOptions({
      target: monaco.languages.typescript.ScriptTarget.ES2015,
      allowNonTsExtensions: true,
    });

    // monaco.languages.typescript.typescriptDefaults.setExtraLibs(extraLibs);
    // extraLibs.forEach((lib) => monaco.editor.createModel(lib.content, "typescript", monaco.Uri.parse(lib.filePath)))

    monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({
      noSemanticValidation: true,
      noSyntaxValidation: false,
    });

    monaco.editor.createModel(
      `async function useMeta(arg0: { id: string; description: string; }) {throw new Error("Function not implemented.");}`,
      "javascript"
    );

    monaco.languages.typescript.javascriptDefaults.addExtraLib(
      `export declare function next() : string`,
      "node_modules/@types/external/index.d.ts"
    );

    await loadTypes(
      "https://raw.githubusercontent.com/axios/axios/v1.x/index.d.ts",
      "axios"
    );
    await loadTypes(
      "https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/underscore/index.d.ts",
      "underscore"
    );
    await loadTypes(
      "https://raw.githubusercontent.com/node-fetch/node-fetch/main/%40types/index.d.ts",
      "node-fetch"
    );
    await loadTypes(
      "https://raw.githubusercontent.com/moment/moment/develop/moment.d.ts",
      "moment"
    )

    await loadTypes("/api/vm/types?unix=" + thisMoment.unix(), "m3");
    monaco.editor.createModel("declare var axios: AxiosStatic;", "javascript");
  });

  const readFile = async (path: string) => {
    const res = await fetch(`/api/tree/read?path=${path}`);
    return res.json();
  };

  const updateWorkFile = async (path: string) => {
    const content = await readFile(path);
    state.setSource(String(content.data));
    state.setCwd(path);
    state.setHash(md5(path));
  };

  return (
    <main className="w-full">
      <LoadingBar color="#1877F2" height={1.5} ref={ref} />
      <Navbar />

      <div className="flex flex-row w-full container mx-auto py-6 divide-x divide-gray-50">
        <div className="w-1/6 text-xs pr-3">
          <p className="uppercase text-xs font-medium select-none mb-2">
            FILES
          </p>

          <div className="flex flex-col space-y-1">
            {_.isArray(treeState?.files) &&
              treeState?.files?.map((entry: TreeEntity) => {
                return (
                  <TreeItem
                    isActive={state.cwd == entry.path}
                    key={entry.name}
                    name={entry.name}
                    path={entry.path}
                    size={entry.stat.size}
                    onClick={() => updateWorkFile(String(entry.path))}
                  />
                );
              })}

            <Button>+</Button>
          </div>
        </div>

        <div className="w-5/6 pl-3 gap-2 flex flex-col">
          <div className="bg-gray-50 rounded-md overflow-hidden">
            <div className="w-full flex flex-row justify-between items-center px-2 py-2">
              <div className="ml-0.5">
                <p className="text-xs text-gray-500 font-mono flex flex-row gap-1 items-center">
                  <svg
                    fill="currentColor"
                    viewBox="0 0 16 16"
                    height="1em"
                    width="1em"
                    className="size-2 fill-gray-500 cursor-pointer"
                  >
                    <path d="M4 0h5.293A1 1 0 0110 .293L13.707 4a1 1 0 01.293.707V14a2 2 0 01-2 2H4a2 2 0 01-2-2V2a2 2 0 012-2zm5.5 1.5v2a1 1 0 001 1h2l-3-3z" />
                  </svg>
                  <span>{state.cwd}</span>
                </p>
                <p className="text-[10px] text-gray-400 font-mono">
                  {state.objectHash}
                </p>
              </div>

              <div>
                <button className="bg-white hover:bg-gray-100 p-1.5 rounded border-gray-100 border hover:border-black">
                  <svg
                    fill="#000000"
                    viewBox="0 0 56 56"
                    xmlns="http://www.w3.org/2000/svg"
                    className="size-4 fill-lime-500 hover:fill-lime-600 cursor-pointer"
                  >
                    <path d="M 39.4615 8.1276 C 33.7743 2.4840 22.1821 1.8521 15.5362 8.5416 C 14.4467 9.6093 14.6428 10.8295 15.3836 11.5704 C 15.9066 12.1151 16.7346 12.3548 17.5191 12.1151 C 22.1603 10.6552 26.4529 10.5245 29.8739 13.0521 L 28.0436 17.9330 C 27.3463 19.8288 27.7167 21.1579 28.9587 22.4217 L 33.9922 27.4770 C 34.9945 28.5011 36.1059 28.8062 37.5658 28.4575 L 41.0959 27.6513 L 42.7953 29.3510 L 42.5119 31.8350 C 42.3597 32.8591 42.4905 33.4910 43.3839 34.3844 L 45.0832 36.0187 C 46.0204 36.9556 47.2186 37.0428 48.1120 36.1494 L 55.1066 29.1984 C 56 28.3050 55.8692 27.1066 54.9540 26.1478 L 53.2765 24.4700 C 52.4264 23.5984 51.7512 23.4241 50.7703 23.5766 L 48.2646 23.8817 L 46.5434 22.2257 L 47.5889 18.4778 C 47.9161 17.2576 47.5019 16.1245 46.1944 14.8389 Z M 2.2225 44.8000 C .1089 46.6739 0 48.6350 1.9611 50.6179 L 5.4257 54.0607 C 7.3650 56 9.3914 55.8910 11.2436 53.7992 L 32.2273 30.2443 L 25.7774 23.8163 Z" />
                  </svg>
                </button>
              </div>
            </div>
          </div>

          <div className="border border-b-2 border-gray-200 rounded-md overflow-hidden">
            <Editor
              height="50vh"
              onMount={applyMonacoMount}
              value={state.source}
              onChange={(event) => state.setSource(String(event))}
              defaultLanguage="javascript"
              language="javascript"
              theme="vs"
              keepCurrentModel={true}
              options={{
                wordWrap: "on",
                minimap: {
                  enabled: false,
                },
                fontSize: 13,
                readOnly: false,
                automaticLayout: true,
                insertSpaces: true,
                autoIndent: "full",
                trimAutoWhitespace: true,
              }}
              defaultValue='Deno.serve(req => new Response("Hello!"));'
            />
          </div>

          <div className="border border-b-2 border-gray-200 rounded-md overflow-hidden">
            {callResultState.result?.context?.currentObject !=
              state.objectHash && (
              <div className="w-full bg-yellow-300 border-b border-b-yellow-400 h-fit px-2.5 pb-1 pt-1.5 flex flex-row items-center gap-2">
                <svg
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  height="1em"
                  width="1em"
                  className="fill-black size-3"
                >
                  <path fill="none" d="M0 0h24v24H0z" />
                  <path d="M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm-1-7v2h2v-2h-2zm0-8v6h2V7h-2z" />
                </svg>

                <span className="text-[12px] font-medium">
                  Results may be out of date.
                </span>
              </div>
            )}

            {callResultState.result?.error && (
              <div className="w-full bg-red-50 h-fit px-2.5 pb-1 pt-1.5 flex flex-col text-xs items-start gap-2">
                <h6 className="text-red-500 font-semibold">
                  {callResultState.result?.error?.name}
                </h6>
                <p>{callResultState.result?.error?.message}</p>
                <pre className="font-mono">
                  {callResultState.result?.error?.stack}
                </pre>
              </div>
            )}

            {callResultState.isCalling && (
              <div className="flex justify-center items-center h-full flex-col">
                <svg
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  height="1em"
                  width="1em"
                  className="fill-gray-500 animate-pulse mb-2"
                >
                  <path d="M17 10V6l-5 4V6l-5 4V4H2v16h20V6l-5 4zm-8 7H7v-3h2v3zm5 0h-2v-3h2v3zm5 0h-2v-3h2v3z" />
                </svg>

                <div className="text-sm font-medium">Execution node..</div>
                <p className="text-[12px] font-mono text-gray-500">
                  {prettyMilliseconds(
                    thisMoment.diff(callResultState.callingAt, "ms")
                  )}
                </p>
              </div>
            )}

            {/* <div>
                <div className="roudned bg-gray-50 p-2 w-fit text-center">
                    <span className="text-sm font-mono">{prettyMilliseconds(callResultState.result?.performance?.millis || 0)}</span>
                    <h4 className="text-xs font-medium text-gray-500">Result</h4>
                </div>
            </div> */}

            <div className="grid grid-cols-8">
              <div className="col-span-6">
                <div>
                  <label
                    htmlFor="stdout"
                    className="text-[10px] font-medium px-2 py-4"
                  >
                    Console
                  </label>
                  <div id="stdout" className="w-full divide-y divide-gray-100">
                    {callResultState.result?.stdout?.length === 0 && (
                      <div className="text-xs w-full flex flex-row items-center gap-2 px-2 py-0.5">
                        <span className="w-[75px] text-gray-300 font-medium text-[12px]">
                          No output
                        </span>
                      </div>
                    )}
                    {callResultState.result?.stdout?.map((line) => (
                      <div className="text-xs w-full flex flex-row items-center gap-2 px-2 py-0.5">
                        <span className="w-[75px] text-gray-400">
                          {moment(line.timestamp).format("HH:mm:ss.SSS")}
                        </span>
                        {line.level === 0 && (
                          <>
                            <svg
                              viewBox="0 0 1024 1024"
                              fill="currentColor"
                              height="1em"
                              width="1em"
                              className="fill-gray-300 size-3"
                            >
                              <path d="M924.3 338.4a447.57 447.57 0 00-96.1-143.3 443.09 443.09 0 00-143-96.3A443.91 443.91 0 00512 64h-2c-60.5.3-119 12.3-174.1 35.9a444.08 444.08 0 00-141.7 96.5 445 445 0 00-95 142.8A449.89 449.89 0 0065 514.1c.3 69.4 16.9 138.3 47.9 199.9v152c0 25.4 20.6 46 45.9 46h151.8a447.72 447.72 0 00199.5 48h2.1c59.8 0 117.7-11.6 172.3-34.3A443.2 443.2 0 00827 830.5c41.2-40.9 73.6-88.7 96.3-142 23.5-55.2 35.5-113.9 35.8-174.5.2-60.9-11.6-120-34.8-175.6zM312.4 560c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.4 48-47.9 48zm199.6 0c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.5 48-47.9 48zm199.6 0c-26.4 0-47.9-21.5-47.9-48s21.5-48 47.9-48 47.9 21.5 47.9 48-21.5 48-47.9 48z" />
                            </svg>

                            <span>{line.stdout}</span>
                          </>
                        )}

                        {line.level === 2 && (
                          <>
                            <svg
                              viewBox="0 0 24 24"
                              fill="currentColor"
                              height="1em"
                              width="1em"
                              className="fill-orange-500 size-3"
                            >
                              <path fill="none" d="M0 0h24v24H0z" />
                              <path d="M4 20v-6a8 8 0 1116 0v6h1v2H3v-2h1zm2-6h2a4 4 0 014-4V8a6 6 0 00-6 6zm5-12h2v3h-2V2zm8.778 2.808l1.414 1.414-2.12 2.121-1.415-1.414 2.121-2.121zM2.808 6.222l1.414-1.414 2.121 2.12L4.93 8.344 2.808 6.222z" />
                            </svg>
                            <span className="text-orange-500 font-semibold">
                              {line.stdout}
                            </span>
                          </>
                        )}

                        {line.level === 1 && (
                          <>
                            <svg
                              viewBox="0 0 24 24"
                              fill="currentColor"
                              height="1em"
                              width="1em"
                              className="fill-red-500 size-3"
                            >
                              <path fill="none" d="M0 0h24v24H0z" />
                              <path d="M4 20v-6a8 8 0 1116 0v6h1v2H3v-2h1zm2-6h2a4 4 0 014-4V8a6 6 0 00-6 6zm5-12h2v3h-2V2zm8.778 2.808l1.414 1.414-2.12 2.121-1.415-1.414 2.121-2.121zM2.808 6.222l1.414-1.414 2.121 2.12L4.93 8.344 2.808 6.222z" />
                            </svg>
                            <span className="text-red-500 font-semibold">
                              {line.stdout}
                            </span>
                          </>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <label
                    htmlFor="stdout"
                    className="text-[10px] font-medium px-2 py-4"
                  >
                    Network Trace
                  </label>
                  <div id="stdout" className="w-full divide-y divide-gray-100">
                    {callResultState.result?.netTrace?.length === 0 && (
                      <div className="text-xs w-full flex flex-row items-center gap-2 px-2 py-0.5">
                        <span className="w-[75px] text-gray-300 font-medium text-[12px]">
                          No output
                        </span>
                      </div>
                    )}
                    {callResultState.result?.netTrace?.map((net) => (
                      <div className="text-xs w-full flex flex-row items-center gap-2 px-2 py-0.5">
                        <div>
                          {net.type === "request" && (
                            <svg
                              viewBox="0 0 1024 1024"
                              fill="currentColor"
                              height="1em"
                              width="1em"
                              className="size-3"
                            >
                              <path d="M873.1 596.2l-164-208A32 32 0 00684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z" />
                            </svg>
                          )}

                          {net.type === "response" && (
                            <svg
                              viewBox="0 0 1024 1024"
                              fill="currentColor"
                              height="1em"
                              width="1em"
                              className="size-3"
                            >
                              <path d="M872 572H266.8l144.3-183c4.1-5.2.4-13-6.3-13H340c-9.8 0-19.1 4.5-25.1 12.2l-164 208c-16.5 21-1.6 51.8 25.1 51.8h696c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z" />
                            </svg>
                          )}
                        </div>
                        <span className="w-[75px] text-gray-400">
                          {moment(net.timestamp).format("HH:mm:ss.SSS")}
                        </span>
                        <span className="font-medium w-[30px] text-center">
                          {net.axiosRequest?.method?.toUpperCase()}
                        </span>
                        <span className="text-blue-500">
                          {net.axiosRequest?.url}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <label
                    htmlFor="stdout"
                    className="text-[10px] font-medium px-2 py-4"
                  >
                    Result as{" "}
                    <span className="underline">
                      {typeof callResultState.result?.resultAsTyped}
                    </span>
                  </label>
                  <div id="stdout" className="w-full divide-y divide-gray-100">
                    {callResultState.result?.resultAsTyped && (
                      <pre className="text-gray-400 text-[10px] font-mono px-2 py-1">
                        {JSON.stringify(callResultState.result?.resultAsTyped)}
                      </pre>
                    )}
                  </div>
                </div>
              </div>

              <div className="col-span-2 overflow-auto">
                <label
                  htmlFor="stdout"
                  className="text-[10px] font-medium px-2 py-4"
                >
                  Dependency Inspector
                </label>

                <div>
                  <DependencyInspector
                    conf={callResultState.result?.context.__deps_results}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
